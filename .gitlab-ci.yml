# This file is part of BenchExec, a framework for reliable benchmarking:
# https://github.com/sosy-lab/benchexec
#
# SPDX-FileCopyrightText: 2007-2020 Dirk Beyer <https://www.sosy-lab.org>
#
# SPDX-License-Identifier: Apache-2.0

# To execute a job locally, install gitlab-runner (https://docs.gitlab.com/runner/install/)
# and run the following command:
# gitlab-runner exec docker --docker-privileged --docker-volumes /sys/fs/cgroup:/sys/fs/cgroup:rw --env CI_REGISTRY_IMAGE=registry.gitlab.com/sosy-lab/software/benchexec <<JOB_NAME>>

variables:
  PRIMARY_USER: benchexec
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  npm_config_cache: "${CI_PROJECT_DIR}/.cache/npm"
  npm_config_prefer_offline: "true"

.pip-cache: &pip-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ".cache/pip"

.node-cache: &node-cache
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ".cache/npm"

image: ${CI_REGISTRY_IMAGE}/test:python-${PYTHON_VERSION}

stages:
  - images
  - test

.tests:cgroupsv1: &tests-cgroupsv1
  stage: test
  before_script:
    # Create user, we do not want to test as root
    - adduser --disabled-login --gecos "" $PRIMARY_USER
    # Give $PRIMARY_USER permission to create cgroups
    - test/for_each_of_my_cgroups.sh chgrp $PRIMARY_USER
    - test/for_each_of_my_cgroups.sh chmod g+w $PRIMARY_USER
    # Install pytest-cov (does not work with --user)
    - pip install pytest-cov
    # Install BenchExec with `dev` dependencies
    - sudo -u $PRIMARY_USER pip install --user ".[dev]"
    # Start lxcfs
    - lxcfs /var/lib/lxcfs &
  script:
    - sudo -u $PRIMARY_USER python -m pytest -ra --cov -k "not tablegenerator"
  after_script:
    - sudo -u $PRIMARY_USER coverage xml
  tags:
    - privileged
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

tests:cgroupsv1:python-3.8:
  <<: *tests-cgroupsv1
  variables:
    PYTHON_VERSION: '3.8'

tests:cgroupsv1:python-3.13:
  <<: *tests-cgroupsv1
  variables:
    PYTHON_VERSION: '3.13'

.tests:cgroupsv2: &tests-cgroupsv2
  stage: test
  before_script:
    # Prepare cgroups
    - test/setup_cgroupsv2_in_container.sh
    # Install pytest-cov (does not work with --user)
    - pip install pytest-cov
    # Install BenchExec with `dev` dependencies
    - pip install --user ".[dev]"
  script:
    - python -m pytest -ra --cov
  after_script:
    - coverage xml
  tags:
    - cgroupsv2
  coverage: '/TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

tests:cgroupsv2:python-3.8:
  <<: *tests-cgroupsv2
  variables:
    PYTHON_VERSION: '3.8'

tests:cgroupsv2:python-3.9:
  <<: *tests-cgroupsv2
  variables:
    PYTHON_VERSION: '3.9'

tests:cgroupsv2:python-3.10:
  <<: *tests-cgroupsv2
  variables:
    PYTHON_VERSION: '3.10'

tests:cgroupsv2:python-3.11:
  <<: *tests-cgroupsv2
  variables:
    PYTHON_VERSION: '3.11'

tests:cgroupsv2:python-3.12:
  <<: *tests-cgroupsv2
  variables:
    PYTHON_VERSION: '3.12'

tests:cgroupsv2:python-3.13:
  <<: *tests-cgroupsv2
  variables:
    PYTHON_VERSION: '3.13'

# Static checks
check-format:
  stage: test
  image: python:3.9
  before_script:
    - pip install 'black<26'
  script:
    - black . --check --diff
  <<: *pip-cache

flynt:
  # Use flynt (https://github.com/ikamensh/flynt) for converting string formatting to f-strings
  stage: test
  image: python:3.9
  before_script:
    - pip install flynt
  script:
    - flynt . --exclude node_modules --line-length 10000 --aggressive --fail-on-change --dry-run
  <<: *pip-cache

flake8:
  stage: test
  image: python:3.8
  before_script:
    - "pip install 'flake8<6' flake8-awesome"
  script:
    - flake8
  <<: *pip-cache

pytype:
  stage: test
  before_script:
    - pip install pytype
  script:
    - pytype -k
  variables:
    PYTHON_VERSION: '3.8'
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ".cache/pip"
      - ".pytype"

ruff:
  stage: test
  before_script:
    - "pip install ruff"
  script:
    - "ruff check . || true"
    - "ruff check . --output-format=gitlab > gl-code-quality-report.json"
  variables:
    PYTHON_VERSION: '3.10'
  artifacts:
    reports:
      codequality: "gl-code-quality-report.json"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ".cache/pip"
      - ".ruff_cache"


# For HTML tables, test that bundled files are uptodate
javascript-build:
  stage: test
  image: node:lts
  before_script:
    - cd benchexec/tablegenerator/react-table
    - npm ci
  script:
    - npm run build
    - git diff --stat --exit-code
  artifacts:
    paths:
      - benchexec/tablegenerator/react-table/build
    when: on_failure
  <<: *node-cache

javascript-tests:
  stage: test
  image: node:lts
  before_script:
    - cd benchexec/tablegenerator/react-table
    - npm ci
  script:
    - npm run test
  <<: *node-cache

javascript-eslint:
  stage: test
  image: node:lts
  before_script:
    - cd benchexec/tablegenerator/react-table
    - npm ci
  script:
    - npm run lint
  <<: *node-cache


# check license declarations etc.
reuse:
  stage: test
  image:
    name: fsfe/reuse:3
    entrypoint: [""]
  script:
    - reuse lint


# Build Docker images
# following this guideline: https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
.build-docker:
  stage: images
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /root/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --dockerfile $CI_PROJECT_DIR/$DOCKERFILE --destination $CI_REGISTRY_IMAGE/$IMAGE
  only:
    - schedules
    - web

build-docker:test:python-3.8:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.8
    IMAGE: test:python-3.8

build-docker:test:python-3.9:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.9
    IMAGE: test:python-3.9

build-docker:test:python-3.10:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.10
    IMAGE: test:python-3.10

build-docker:test:python-3.11:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.11
    IMAGE: test:python-3.11

build-docker:test:python-3.12:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.12
    IMAGE: test:python-3.12

build-docker:test:python-3.13:
  extends: .build-docker
  variables:
    DOCKERFILE: test/Dockerfile.python-3.13
    IMAGE: test:python-3.13
